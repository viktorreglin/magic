Interface von query_db
======================

query_db speichert die magic-Karten in einer mysql-Datenbank und ermöglicht Abfragen dazu.
Wie das genau funktioniert muss der Anwender von query_db nicht wissen. Er muss nur das hier
beschriebene Interface kennen.

Das Interface von query_db besteht aus einigen ausführbaren Programmen (unter Umständen als Scripte
implementiert) sowie einer Bibliothek mit C-Funktionen. Für die Abfragen wird eine Sprache verwendet,
die problemorientiert ist (aber relativ einfach in SQL umgewandelt werden kann).

0. Voraussetzungen
Der lokale mysql-Server muss laufen, der aktuelle User muss ihn benutzen dürfen, siehe
readme_mysql.txt

1. ausführbare Programme

qdb_create DBName Tabellendefinition
   erzeugt die Datenbank 'DBName' mit den Tabellen, die im angegebenen File beschrieben sind:
   Tabellendefinition ist ein zeilenorientiertes Textfile und hat folgenden Aufbau:

   table Tabellename
    Eigenschaft Typ
    Eigenschaft Typ
    ...
   endttable
   ...

   Eine Eigenschaft muss mit einem * versehen sein = Primärschlüssel:
    *Eigenschaft Typ
    Eigenschaft muss eindeutig in der Tabelle sein.
   Ein Fremdschlüssel wird mit einem + gekennzeichnet und sieht so aus:
    +Eigenschaft Typ Table2(Eigenschaft2)
    Eigenschaft wird auf die Werte von Eigenschaft2 in Table2 eingeschränkt.
    Eigenschaft2 muss Primärschlüssel in Table2 sein.
    Table2 muss vorher definiert worden sein !


   Es können mehrere Tabellen angegeben werden.
   Beachte, dass Fremdschlüssel nur rückwärts verweisen können.
   (Also normalerweise erst Edition, dann Card definieren.)

   Eigenschaft ist ein Name, der nachher in Abfragen verwendet werden kann. Als Typen sind erlaubt:
    int, string, string(laenge), color, mana, ident
    color, mana und ident sind Magic-spezifische Datentypen, sie werden unten beschrieben (s. 3. Abfragesprache).
   Wenn in den Tabellendefinitionen Eigenschaften fehlen, dann macht das nichts. Weitere Eigenschaften werden
   automatisch definiert, sobald sie beim Eintragen von Daten benutzt werden, dann immer mit dem Typ string.

   Hinweis: qdb_create erzeugt als Nebeneffekt die Datei DBName.sql.


qdb_show
   listet die vorhandenen Datenbanken.

qdb_show DBName
   zeigt den Aufbau der angegebene Datenbank.

qdb_delete DBName
   löscht die angegebene Datenbank (Achtung: Lösche nur selbst erzeugte Datenbanken !)

qdb_dump DBName Table
   listet den Inhalt der angegebenen Tabelle

qdb_insert DBName Table property value property value ...
   trägt die angegebenen Werte in die Datenbanktabelle ein.


2. Bibliothek
 genauer --> siehe qdb.h
 Eintragen von Werten:

  eh = qdb_begin_row(Datenbankname,Tabellenname)
  qdb_set_value(eh,Propertyname,Value)
  ... weitere qdb_set_value()-Aufrufe, Value immer als C-string
  qdb_end_row(eh)
  Beispiel fuer 2 Tabellen:
   eh = qdb_begin_row("magic","edition");
   qdb_set_value(eh,"name","6ED");
   qdb_end_row(eh);

   ch = qdb_begin("magic","card");
   qdb_set_value(ch,"edition_code","6ED"); // Verknuepfung zur edition-Tabelle !
   qdb_set_value(ch,"name","Plains");
   qdb_set_value(ch,"id","237f51551c42ec1cec0d4417147d8d86c0027e00");
   qdb_end_row(ch);
   ...

  Abfragen/Ändern
   qdb_query(Datenbankname,Tabellenname,Query) ...
   qdb_change(Datenbankname,Tabellenname,Query,Property,Newvalue)
   qdb_delete(Datenbankname,Tabellenname,Query)

3. Abfragesprache
 Die Sprache ist näher am Benutzer (also näher an Magic) als SQL, aber leicht in SQL zu übersetzen.

 Typen        --> SQL-Typ
  bool             TINYINT
  int              INT
  string           VARCHAR(1024)   CHARACTER SET utf8
  string(laenge)   VARCHAR(laenge) CHARACTER SET utf8
  ident            BINARY(20)
  color            SET ('White', 'Red', 'Green', 'Blue', 'Black')
  mana             VARCHAR(24)
  date             DATETIME

 Syntax
  t.b.d.

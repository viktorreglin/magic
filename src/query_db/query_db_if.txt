Interface von query_db
======================

query_db speichert die magic-Karten in einer mysql-Datenbank und ermöglicht Abfragen dazu.
Wie das genau funktioniert muss der Anwender von query_db nicht wissen. Er muss nur das hier
beschriebene Interface kennen.

Das Interface von query_db besteht aus einigen ausführbaren Programmen (unter Umständen als Scripte
implementiert) sowie einer Bibliothek mit C-Funktionen. Für die Abfragen wird eine Sprache verwendet,
die problemorientiert ist (aber relativ einfach in SQL umgewandelt werden kann).

0. Voraussetzungen
Der lokale mysql-Server muss laufen, der aktuelle User muss ihn benutzen dürfen, siehe
../../doc/readme_mysql.txt

1. ausführbare Programme

qdb_create Name Tabellendefinition
   erzeugt die Datenbank 'Name' mit den Tabellen, die im angegebenen File beschrieben sind.
   Tabellendefinition ist ein zeilenorientiertes Textfile und haben folgenden Aufbau:

   table Tabellename
    Eigenschaft Typ
    Eigenschaft Typ
    ...
   endttable
   ...

   Es können mehrere Tabellen angegeben werden. Die erste ist die, nach deren Elementen primäre gefragt wird,
   es sollte also die mit den Karten sein (die zweite normalerweise: Edition).
   Eigenschaft ist ein Name, der nachher in Abfragen verwendet werden kann. Als Typen sind erlaubt:
    int, string, string(laenge), color, mana, ident
    color, mana und ident sind Magic-spezifische Datentypen, sie werden unten beschrieben (s. 3. Abfragesprache).
   Wenn in den Tabellendefinitionen Eigenschaften fehlen, dann macht das nichts. Weitere Eigenschaften werden automatisch definiert, sobald sie beim Eintragen von Daten benutzt werden, immer mit dem Typ string.


qdb_delete Name
   löscht die angegebene Datenbank.


qdb_types Name Tabellendefinition
   fragt die Datenbank 'Name' nach ihren Tabellen und erzeugt Tabellendefinition im obigen Format.


2. Bibliothek
 genauer --> siehe qdb.h
 Eintragen von Werten:
  dh = qdb_open(Name)
  qdb_close(dh)
    Öffnen und Schließen der angegebenen Datenbank

  eh = qdb_begin(dh,Tabellenname)
  qdb_property(eh,Propertyname,Value)
  ... weitere qdb_property()-Aufrufe, Value immer als C-string
  qdb_end(eh)
  Diese Aufrufe können geschachtelt werden, z.B:
   eh = qdb_begin(dh,"edition")
   qdb_property(eh,"name","6ED")
   ch = qdb_begin(eh,"card")
   qdb_property(ch,"name","Plains")
   qdb_property(ch,"id","237f51551c42ec1cec0d4417147d8d86c0027e00")
   qdb_end(ch)
   ...
   qdb_end(eh)

  Abfragen/Ändern
   qdb_query(dh,Tabellenname,Query) ...
   qdb_change(dh,Tabellenname,Query,Property,Newvalue)
   qdb_delete(dh,Tabellenname,Query)

3. Abfragesprache
 Die Sprache ist näher am Benutzer (also näher an Magic) als SQL, aber leicht in SQL zu übersetzen.

 Typen        --> SQL-Typ
  int              INT
  string           VARCHAR(1024)   CHARACTER SET utf8
  string(laenge)   VARCHAR(laenge) CHARACTER SET utf8
  ident            BINARY(20)
  color            SET ('White', 'Red', 'Green', 'Blue', 'Black')
  mana             VARCHAR(24)
  date             DATETIME

 Syntax
  t.b.d.
